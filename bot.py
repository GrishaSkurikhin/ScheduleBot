from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
import telebot
import datetime

import Parser, Database, config


bot = telebot.TeleBot(config.bot_token)

'''
–¶–µ–ø–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
'''

@bot.message_handler(commands=['start'])
def start_command(message):
    id = message.chat.id
    if db.check_id(id):
        bot.send_message(message.chat.id, config.start_message1, reply_markup=telebot.types.ReplyKeyboardRemove())
        Menu(message)
    else:
        bot.send_message(message.chat.id, config.start_message2, reply_markup=telebot.types.ReplyKeyboardRemove())
        choose_course(message, False)

def choose_course(message, isReg):
    reply_markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for course in range(1, 6):
        reply_markup.add(telebot.types.KeyboardButton("–ö—É—Ä—Å ‚Ññ" + str(course)))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", reply_markup=reply_markup)
    bot.register_next_step_handler(msg, choose_institute, isReg=isReg)


def choose_institute(message, isReg):
    reply_markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for institute in range(1, 13):
        reply_markup.add(telebot.types.KeyboardButton("–ò–Ω—Å—Ç–∏—Ç—É—Ç ‚Ññ" + str(institute)))

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç", reply_markup=reply_markup)
    bot.register_next_step_handler(msg, choose_group, course=message, isReg=isReg)

def choose_group(message, course, isReg):
    groups = Parser.ParseGroups(course.text[-1], message.text[-1])

    reply_markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for group in groups:
        reply_markup.add(telebot.types.KeyboardButton(group))

    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=reply_markup)
    bot.register_next_step_handler(msg, end_registration, isReg=isReg)

def end_registration(message, isReg):
    if isReg:
        db.del_user(message.chat.id)
        db.insert_user(message.chat.id, message.text)
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        Menu(message)
    else:
        db.insert_user(message.chat.id, message.text)
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        Menu(message)

@bot.message_handler(commands=['ReReg'])
def ReRegistration(message):
    id = message.chat.id
    if db.check_id(id):
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", reply_markup=telebot.types.ReplyKeyboardRemove())
        choose_course(message, True)
    else:
        bot.send_message(message.chat.id, config.no_reg_message)

'''
–§—É–Ω–∫—Ü–∏–∏, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
'''

@bot.message_handler(commands=['today'])
def Today(message):
    group = Group(message)
    if group == None: return

    if db.check_schedule(group):
        date = DateToDBdate(datetime.date.today())
        schedule = db.get_date_schedule(group, date)
        PrintSchedule(message, schedule, date)
    else:
        bot.send_message(message.chat.id, config.no_reg_message)

@bot.message_handler(commands=['tomorrow'])
def Tomorrow(message):
    group = Group(message)
    if group == None: return

    if db.check_schedule(group):
        date = DateToDBdate(datetime.date.today() + datetime.timedelta(days=1))
        schedule = db.get_date_schedule(group, date)
        PrintSchedule(message, schedule, date)
    else:
        bot.send_message(message.chat.id, config.no_reg_message)

@bot.message_handler(commands=['weekday'])
def WeekDay(message):
    group = Group(message)
    if group == None: return

    days = ("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±")
    keyboard = telebot.types.InlineKeyboardMarkup()
    Buttons = []
    for day in days:
        Buttons.append(telebot.types.InlineKeyboardButton(text=day, callback_data=day))
    keyboard.row(*Buttons)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=keyboard)

    @bot.callback_query_handler(lambda call: call.data in days)
    def callback_inline(call):
        if db.check_schedule(group):
            date = WeekDayToDate(call.data)
            schedule = db.get_date_schedule(group, date)
            PrintSchedule(message, schedule, date)
        else:
            bot.send_message(message.chat.id, config.no_reg_message)

@bot.message_handler(commands=['date'])
def Date(message):
    group = Group(message)
    if group == None: return

    if not db.check_schedule(group):
        bot.send_message(message.chat.id, config.no_reg_message)
        return

    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(message.chat.id,
                     f"Select {LSTEP[step]}",
                     reply_markup=calendar)

    @bot.callback_query_handler(func=DetailedTelegramCalendar.func())
    def call(c):
        result, key, step = DetailedTelegramCalendar().process(c.data)
        if not result and key:
            bot.edit_message_text(f"Select {LSTEP[step]}",
                                  c.message.chat.id,
                                  c.message.message_id,
                                  reply_markup=key)
        elif result:
            date = DateToDBdate(result)
            schedule = db.get_date_schedule(group, date)
            PrintSchedule(message, schedule, date)

@bot.message_handler(commands=['thisweek'])
def ThisWeek(message):
    group = Group(message)
    if group == None: return

    if not db.check_schedule(group):
        bot.send_message(message.chat.id, config.no_reg_message)
        return

    date = datetime.datetime.today() # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today = date.weekday() # —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Ü–∏—Ñ—Ä–∞ –æ—Ç 0 –¥–æ 6)
    week_start = date - datetime.timedelta(days=today) # –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
    for i in range(6):
        date = DateToDBdate(week_start)
        schedule = db.get_date_schedule(group, date)
        PrintSchedule(message, schedule, date)
        week_start += datetime.timedelta(days=1)

@bot.message_handler(commands=['session'])
def Session(message):
    group = Group(message)
    if group == None: return

    schedule = db.get_session(group)
    text = ""
    if len(schedule) == 0:
        text += "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"
    else:
        for day in schedule:
            text += "====== " + day[0][0] + " ======""\n"
            for subject in day:
                text += "‚åö " + subject[1] + "\n"
                text += "üìù " + subject[2] + "\n"
                text += "üë§ " + subject[3] + "\n"
                text += "üìç " + subject[4] + "\n\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['update'])
def UpdateSchedule(message):
    group = Group(message)
    if group == None:
        return

    bot.send_message(message.chat.id, "–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏")
    if db.check_schedule(group):
        db.delete_group_schedule(group)

    for week_num in range(1, 20):
        week_schedule = Parser.ParseScheduleWeek(group, week_num)
        db.insert_schedule_table(week_schedule)

    if db.check_session(group):
        db.delete_group_session(group)

    session_schedule = Parser.ParseSession(group)
    db.insert_session_table(session_schedule)

    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

@bot.message_handler(commands=['help',])
def Help(message):
    text =\
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - /start
    –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - /ReReg
    –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é - /Menu
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - /today
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ - /tomorrow
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ - /weekday
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ - /date
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—é—é –Ω–µ–¥–µ–ª—é - /thisweek
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é - /week
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ - /session
    –ó–∞–≥—Ä—É–∑–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - /update
    """

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['Menu'])
def Menu(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    button1 = telebot.types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è")
    button2 = telebot.types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞")
    button3 = telebot.types.KeyboardButton("–ü–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏")
    button4 = telebot.types.KeyboardButton("–ü–æ –¥–∞—Ç–µ")
    button5 = telebot.types.KeyboardButton("–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é")
    button6 = telebot.types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
    button7 = telebot.types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    button8 = telebot.types.KeyboardButton("–ü–æ–º–æ—â—å")
    markup.row(button1, button2, button3, button4)
    markup.row(button5, button6)
    markup.row(button7, button8)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é
@bot.message_handler(content_types=['text'])
def MenuController(message):
    choices_dict = {'–°–µ–≥–æ–¥–Ω—è': Today, \
                    '–ó–∞–≤—Ç—Ä–∞': Tomorrow, \
                    '–ü–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏': WeekDay,\
                    '–ü–æ –¥–∞—Ç–µ': Date,\
                    '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é': ThisWeek,\
                    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏': Session,\
                    '–ó–∞–≥—Ä—É–∑–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': UpdateSchedule,\
                    '–ü–æ–º–æ—â—å': Help}

    func = choices_dict.get(message.text, None)
    if func != None:
        func(message)

'''
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
'''

# –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –µ–≥–æ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫
def Group(message):
    id = message.chat.id
    if not db.check_id(id):
        bot.send_message(message.chat.id, config.no_reg_message)
        return None
    else:
        group = db.get_user_group(id)
        return group

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def DateToDBdate(date):
    day = str(date.day)
    month = str(date.month)
    if len(day) == 1:
        day = "0" + day
    if len(month) == 1:
        month = "0" + month
    return day + "." + month

def WeekDayToDate(day):
    d = {"–ü–Ω": 0, "–í—Ç": 1, "–°—Ä": 2, "–ß—Ç": 3, "–ü—Ç": 4, "–°–±": 5}
    RequiredDay = d[day]
    today = datetime.datetime.today().weekday()
    if RequiredDay == today:
        return DateToDBdate(datetime.datetime.today())
    elif RequiredDay > today:
        return DateToDBdate(datetime.datetime.today() +\
                            datetime.timedelta(days=(RequiredDay-today)))
    else:
        return DateToDBdate(datetime.datetime.today() +\
                            datetime.timedelta(days=((6-today)+RequiredDay)))

def PrintSchedule(message, schedule, date):
    text = ""
    if len(schedule) == 0:
        text += "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + date + "\n" + "=============" + "\n"
        text += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
    else:
        text += "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + schedule[0][0] + " (" + schedule[0][1] + ")" + "\n" + "=============" + "\n\n"
        for subject in schedule:
            text += "‚åö " + subject[2] + "\n"
            text += "üìù " + subject[4] + ", " + subject[3] + "\n"
            text += "üë§ " + subject[5] + "\n"
            text += "üìç " + subject[6] + "\n\n"

    bot.send_message(message.chat.id, text)

if __name__ == "__main__":
    db = Database.Database(config.database_name)
    bot.polling(none_stop=True)